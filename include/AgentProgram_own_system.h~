#ifndef AGENT_PROGRAM_H_
#define AGENT_PROGRAM_H_

#include <ros/ros.h>
#include <Robot.h>
#include <string>
#include <vector>
#include <geometry_msgs/Twist.h>
#include <geometry_msgs/Vector3Stamped.h>
#include <nav_msgs/Odometry.h>
#include <tf/transform_broadcaster.h>
#include <tf/transform_listener.h>
#include <tf/transform_datatypes.h>
#include <cmath>

#define LOG_NAME "agent_node"

struct AgentState{
	tf::StampedTransform transform;
};

class AgentProgram{

	ros::NodeHandle nh, private_nh;
	ros::Subscriber master_speed_subs;


	std::string agent_name;
	std::vector<std::string> list_of_agents;
	std::vector<float> aims;	
	double k_gain, distance_to_wall;
	bool use_northstar;
	bool obstacle_avoidance;
	ros::Duration cur_time;
	geometry_msgs::Twist speed_of_master;

	Robot robot;
	unsigned int number_of_agents; 	

	void masterSpeedCallback(const nav_msgs::Odometry &msg);
	std::vector<AgentState> agentsStates();
	tf::Vector3 calculateSpeed(std::vector<AgentState> agents_states, std::vector<tf::Vector3> signals_from_rangers);

public:
	AgentProgram();
	~AgentProgram();

	void run();
};

#endif /* AGENT_PROGRAM_H_ */
